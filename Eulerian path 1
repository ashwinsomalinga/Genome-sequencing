def eulerian_cycle(graph):
    # Initialize an empty stack and path
    stack = []
    path = []

    # Start with a random vertex
    start_vertex = next(iter(graph.keys()))
    stack.append(start_vertex)

    while stack:
        current_vertex = stack[-1]

        if graph[current_vertex]:
            # Choose the next unvisited neighbor
            next_vertex = graph[current_vertex].pop(0)
            stack.append(next_vertex)
        else:
            # If all neighbors are visited, backtrack
            path.append(stack.pop())

    # Reverse the path to get the Eulerian cycle
    path.reverse()
    return path


# Test the code with the provided sample input
adjacency_list = {
    0: [3],
    1: [0],
    2: [1, 6],
    3: [2],
    4: [2],
    5: [4],
    6: [5, 8],
    7: [9],
    8: [7],
    9: [6]
}

cycle = eulerian_cycle(adjacency_list)
print(" ".join(str(vertex) for vertex in cycle))
