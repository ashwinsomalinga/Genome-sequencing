from collections import defaultdict

def build_de_bruijn_graph(patterns):
    graph = defaultdict(list)
    for pattern in patterns:
        prefix = pattern[:-1]
        suffix = pattern[1:]
        graph[prefix].append(suffix)
    return graph

def find_eulerian_path(graph):
    in_degrees = defaultdict(int)
    out_degrees = defaultdict(int)
    for node, edges in graph.items():
        out_degrees[node] = len(edges)
        for neighbor in edges:
            in_degrees[neighbor] += 1

    start_node = None
    for node in graph.keys():
        if out_degrees[node] - in_degrees[node] == 1:
            start_node = node
            break

    if not start_node:
        start_node = next(iter(graph))

    path = []
    stack = [start_node]
    while stack:
        node = stack[-1]
        if graph[node]:
            stack.append(graph[node].pop())
        else:
            path.append(stack.pop())

    path.reverse()

    return path

# Read the input
k = int(input())
patterns = input().split()

# Build the de Bruijn graph
graph = build_de_bruijn_graph(patterns)

# Find the Eulerian path
eulerian_path = find_eulerian_path(graph)

# Reconstruct the string
text = eulerian_path[0]
for i in range(1, len(eulerian_path)):
    text += eulerian_path[i][-1]

# Print the reconstructed string
print(text)
