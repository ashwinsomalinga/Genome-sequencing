def LinearSpectrum(Peptide, AminoAcidMass):
    PrefixMass = [0]
    for i in range(1, len(Peptide) + 1):
        PrefixMass.append(PrefixMass[i - 1] + AminoAcidMass[Peptide[i - 1]])

    LinearSpectrum = [0]
    for i in range(len(Peptide)):
        for j in range(i + 1, len(Peptide) + 1):
            LinearSpectrum.append(PrefixMass[j] - PrefixMass[i])

    return sorted(LinearSpectrum)


def CyclicSpectrum(Peptide, AminoAcidMass):
    PrefixMass = [0]
    for i in range(1, len(Peptide) + 1):
        PrefixMass.append(PrefixMass[i - 1] + AminoAcidMass[Peptide[i - 1]])

    peptide_mass = PrefixMass[len(Peptide)]
    CyclicSpectrum = [0]
    for i in range(len(Peptide)):
        for j in range(i + 1, len(Peptide) + 1):
            CyclicSpectrum.append(PrefixMass[j] - PrefixMass[i])
            if i > 0 and j < len(Peptide):
                CyclicSpectrum.append(peptide_mass - (PrefixMass[j] - PrefixMass[i]))

    return sorted(CyclicSpectrum)


# Test the function with the sample input
Peptide = "IRINYPETVGNKQE"
AminoAcidMass = {
    'A': 71, 'C': 103, 'D': 115, 'E': 129, 'F': 147, 'G': 57, 'H': 137, 'I': 113,
    'K': 128, 'L': 113, 'M': 131, 'N': 114, 'P': 97, 'Q': 128, 'R': 156, 'S': 87,
    'T': 101, 'V': 99, 'W': 186, 'Y': 163
}

cyclic_spectrum = CyclicSpectrum(Peptide, AminoAcidMass)
print(" ".join(str(mass) for mass in cyclic_spectrum))

#detailed explanation



The function LinearSpectrum takes a peptide sequence (Peptide) and a dictionary of amino acid masses (AminoAcidMass) as input and returns the linear spectrum of the peptide.

PrefixMass is initialized as a list containing 0. It will store the prefix masses of the peptide sequence.
The for loop calculates the prefix masses by iterating over each amino acid in the peptide sequence and summing up the masses of the previous amino acids.
LinearSpectrum is initialized with 0, as the mass 0 is always included in the spectrum.
The nested for loop calculates the mass differences between each pair of amino acids in the peptide sequence and adds them to the linear spectrum list.
The linear spectrum list is sorted in ascending order and returned as the output.
The function CyclicSpectrum takes the same input parameters as LinearSpectrum and returns the cyclic spectrum of the peptide.

PrefixMass is calculated in the same way as in the LinearSpectrum function.
The variable peptide_mass stores the mass of the entire peptide, which is the last element in PrefixMass.
The cyclic spectrum list is initialized with 0, representing the mass 0 and the entire peptide mass.
The nested for loop calculates the mass differences between each pair of amino acids in the peptide sequence and adds them to the cyclic spectrum list.
Additionally, if the pair of amino acids is not at the ends of the peptide (i > 0 and j < len(Peptide)), the mass of the subpeptide formed by considering the remaining portion of the cyclic peptide is also added to the cyclic spectrum list.
The cyclic spectrum list is sorted in ascending order and returned as the output.
The provided sample input is used to test the code.

The peptide sequence is set to "LEQN".
The dictionary AminoAcidMass contains the masses of the amino acids.
The CyclicSpectrum function is called with the peptide and amino acid masses as arguments.
The resulting cyclic spectrum is printed as space-separated integers using a list comprehension.
