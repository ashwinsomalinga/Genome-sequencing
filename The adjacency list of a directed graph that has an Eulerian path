from collections import defaultdict

def find_eulerian_path(graph):
    # Count the in-degrees and out-degrees of each node
    in_degrees = defaultdict(int)
    out_degrees = defaultdict(int)
    for node, edges in graph.items():
        out_degrees[node] = len(edges)
        for neighbor in edges:
            in_degrees[neighbor] += 1

    # Find the starting node (the node with out-degree - in-degree = 1)
    start_node = None
    for node in graph.keys():
        if out_degrees[node] - in_degrees[node] == 1:
            start_node = node
            break

    # If there is no starting node with out-degree - in-degree = 1, choose any node as the starting node
    if not start_node:
        start_node = next(iter(graph))

    # Perform Eulerian path traversal
    path = []
    stack = [start_node]
    while stack:
        node = stack[-1]
        if graph[node]:
            stack.append(graph[node].pop())
        else:
            path.append(stack.pop())

    # Reverse the path to get the correct order
    path.reverse()

    return path

# Test the function with the given input
adjacency_list = {
    0: [2],
    1: [3],
    2: [1],
    3: [0, 4],
    4: [],   # Add an empty list for node 4
    6: [3, 7],
    7: [8],
    8: [9],
    9: [6]
}

eulerian_path = find_eulerian_path(adjacency_list)
print(' '.join(str(node) for node in eulerian_path))
